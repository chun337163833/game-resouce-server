// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.shovelgame.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import org.shovelgame.domain.Tariff;

privileged aspect Tariff_Roo_Finder {
    
    public static Long Tariff.countFindTariffsByBasicDiscount(Boolean basicDiscount) {
        if (basicDiscount == null) throw new IllegalArgumentException("The basicDiscount argument is required");
        EntityManager em = Tariff.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Tariff AS o WHERE o.basicDiscount = :basicDiscount", Long.class);
        q.setParameter("basicDiscount", basicDiscount);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Tariff> Tariff.findTariffsByBasicDiscount(Boolean basicDiscount) {
        if (basicDiscount == null) throw new IllegalArgumentException("The basicDiscount argument is required");
        EntityManager em = Tariff.entityManager();
        TypedQuery<Tariff> q = em.createQuery("SELECT o FROM Tariff AS o WHERE o.basicDiscount = :basicDiscount", Tariff.class);
        q.setParameter("basicDiscount", basicDiscount);
        return q;
    }
    
    public static TypedQuery<Tariff> Tariff.findTariffsByBasicDiscount(Boolean basicDiscount, String sortFieldName, String sortOrder) {
        if (basicDiscount == null) throw new IllegalArgumentException("The basicDiscount argument is required");
        EntityManager em = Tariff.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Tariff AS o WHERE o.basicDiscount = :basicDiscount");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Tariff> q = em.createQuery(queryBuilder.toString(), Tariff.class);
        q.setParameter("basicDiscount", basicDiscount);
        return q;
    }
    
}
