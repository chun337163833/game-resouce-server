// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.shovelgame.domain;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.shovelgame.domain.OtherUser;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OtherUser_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "puMainDB")
    transient EntityManager OtherUser.entityManager;
    
    public static final List<String> OtherUser.fieldNames4OrderClauseFilter = java.util.Arrays.asList("serialVersionUID");
    
    public static long OtherUser.countOtherUsers() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OtherUser o", Long.class).getSingleResult();
    }
    
    public static List<OtherUser> OtherUser.findAllOtherUsers() {
        return entityManager().createQuery("SELECT o FROM OtherUser o", OtherUser.class).getResultList();
    }
    
    public static List<OtherUser> OtherUser.findAllOtherUsers(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM OtherUser o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, OtherUser.class).getResultList();
    }
    
    public static OtherUser OtherUser.findOtherUser(Long id) {
        if (id == null) return null;
        return entityManager().find(OtherUser.class, id);
    }
    
    public static List<OtherUser> OtherUser.findOtherUserEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OtherUser o", OtherUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<OtherUser> OtherUser.findOtherUserEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM OtherUser o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, OtherUser.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public OtherUser OtherUser.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OtherUser merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
