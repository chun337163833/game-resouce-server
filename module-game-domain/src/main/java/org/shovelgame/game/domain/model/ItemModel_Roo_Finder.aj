// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.shovelgame.game.domain.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.shovelgame.game.domain.enumeration.ItemType;
import org.shovelgame.game.domain.enumeration.Rarity;
import org.shovelgame.game.domain.model.ItemModel;

privileged aspect ItemModel_Roo_Finder {
    
    public static Long ItemModel.countFindItemModelsByRarityAndType(Rarity rarity, ItemType type) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = ItemModel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ItemModel AS o WHERE o.rarity = :rarity AND o.type = :type", Long.class);
        q.setParameter("rarity", rarity);
        q.setParameter("type", type);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ItemModel> ItemModel.findItemModelsByRarityAndType(Rarity rarity, ItemType type) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = ItemModel.entityManager();
        TypedQuery<ItemModel> q = em.createQuery("SELECT o FROM ItemModel AS o WHERE o.rarity = :rarity AND o.type = :type", ItemModel.class);
        q.setParameter("rarity", rarity);
        q.setParameter("type", type);
        return q;
    }
    
    public static TypedQuery<ItemModel> ItemModel.findItemModelsByRarityAndType(Rarity rarity, ItemType type, String sortFieldName, String sortOrder) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = ItemModel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ItemModel AS o WHERE o.rarity = :rarity AND o.type = :type");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ItemModel> q = em.createQuery(queryBuilder.toString(), ItemModel.class);
        q.setParameter("rarity", rarity);
        q.setParameter("type", type);
        return q;
    }
    
}
