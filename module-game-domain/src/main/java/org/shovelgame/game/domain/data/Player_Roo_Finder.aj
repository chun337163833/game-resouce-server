// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.shovelgame.game.domain.data;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.shovelgame.game.domain.data.Player;

privileged aspect Player_Roo_Finder {
    
    public static Long Player.countFindPlayersByUserName(String userName) {
        if (userName == null || userName.length() == 0) throw new IllegalArgumentException("The userName argument is required");
        EntityManager em = Player.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Player AS o WHERE o.userName = :userName", Long.class);
        q.setParameter("userName", userName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Player> Player.findPlayersByUserName(String userName) {
        if (userName == null || userName.length() == 0) throw new IllegalArgumentException("The userName argument is required");
        EntityManager em = Player.entityManager();
        TypedQuery<Player> q = em.createQuery("SELECT o FROM Player AS o WHERE o.userName = :userName", Player.class);
        q.setParameter("userName", userName);
        return q;
    }
    
    public static TypedQuery<Player> Player.findPlayersByUserName(String userName, String sortFieldName, String sortOrder) {
        if (userName == null || userName.length() == 0) throw new IllegalArgumentException("The userName argument is required");
        EntityManager em = Player.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Player AS o WHERE o.userName = :userName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Player> q = em.createQuery(queryBuilder.toString(), Player.class);
        q.setParameter("userName", userName);
        return q;
    }
    
}
