// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.shovelgame.game.domain.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.shovelgame.game.domain.enumeration.Rarity;
import org.shovelgame.game.domain.model.SeekerModel;

privileged aspect SeekerModel_Roo_Finder {
    
    public static Long SeekerModel.countFindSeekerModelsByRarity(Rarity rarity) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        EntityManager em = SeekerModel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SeekerModel AS o WHERE o.rarity = :rarity", Long.class);
        q.setParameter("rarity", rarity);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SeekerModel> SeekerModel.findSeekerModelsByRarity(Rarity rarity) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        EntityManager em = SeekerModel.entityManager();
        TypedQuery<SeekerModel> q = em.createQuery("SELECT o FROM SeekerModel AS o WHERE o.rarity = :rarity", SeekerModel.class);
        q.setParameter("rarity", rarity);
        return q;
    }
    
    public static TypedQuery<SeekerModel> SeekerModel.findSeekerModelsByRarity(Rarity rarity, String sortFieldName, String sortOrder) {
        if (rarity == null) throw new IllegalArgumentException("The rarity argument is required");
        EntityManager em = SeekerModel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SeekerModel AS o WHERE o.rarity = :rarity");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SeekerModel> q = em.createQuery(queryBuilder.toString(), SeekerModel.class);
        q.setParameter("rarity", rarity);
        return q;
    }
    
}
